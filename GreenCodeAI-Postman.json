{
	"info": {
		"_postman_id": "f12e5a9b-a62c-4e42-9ff2-81e75c632ec4",
		"name": "GreenCodeAI",
		"description": "Collection for testing the GreenCodeAI backend API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the backend is running properly"
			},
			"response": []
		},
		{
			"name": "Analyze Code (Basic)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"def calculate_values(data):\\n    result = []\\n    for item in data:\\n        if item > 0:\\n            result.append(item * 2)\\n    total = 0\\n    for r in result:\\n        total += r\\n    return result, total\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/analyze",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"analyze"
					]
				},
				"description": "Analyze a simple Python function for optimization"
			},
			"response": []
		},
		{
			"name": "Analyze Code (Advanced Options)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"def calculate_values(data):\\n    result = []\\n    for item in data:\\n        if item > 0:\\n            result.append(item * 2)\\n    total = 0\\n    for r in result:\\n        total += r\\n    return result, total\",\n    \"context\": \"readability\",\n    \"advanced\": true,\n    \"variants\": true\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/analyze",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"analyze"
					]
				},
				"description": "Analyze code with advanced options"
			},
			"response": []
		},
		{
			"name": "Analyze Code (Empty Code)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/analyze",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"analyze"
					]
				},
				"description": "Test error handling with empty code"
			},
			"response": []
		},
		{
			"name": "Analyze Code (Complex Example)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"def fibonacci(n):\\n    if n <= 0:\\n        return []\\n    elif n == 1:\\n        return [0]\\n    elif n == 2:\\n        return [0, 1]\\n    \\n    fib_list = [0, 1]\\n    for i in range(2, n):\\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\\n    \\n    return fib_list\\n\\ndef calculate_factorial(n):\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\ndef process_data(data):\\n    results = []\\n    for item in data:\\n        if item % 2 == 0:\\n            results.append(fibonacci(item))\\n        else:\\n            results.append(calculate_factorial(item))\\n    return results\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/analyze",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"analyze"
					]
				},
				"description": "Analyze a more complex Python code with multiple functions"
			},
			"response": []
		},
		{
			"name": "Analyze Code (Invalid Syntax)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"def calculate_values(data):\\n    result = []\\n    for item in data:\\n        if item > 0:\\n            result.append(item * 2)\\n    total = 0\\n    for r in result:\\n        total += r\\n    return result total\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/analyze",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"analyze"
					]
				},
				"description": "Test error handling with invalid Python syntax"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string",
			"description": "Base URL for the API"
		}
	]
}
